PARSER_BEGIN(SonaMarkosyan)
import java.util.*;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;


public class SonaMarkosyan {
  
	public static Scanner input= new Scanner(System.in);   
	public static File file = new File(input.nextLine());
	public static final int LENGTH = 256;
	public static int ptr;
	public static String str="";
    public static String tmp="";
	public static char memory[] = new char[LENGTH]; 
  	
    public static void main(String[] args) {
    	String str="";
        String tmp="";
        try {
        	BufferedReader br = new BufferedReader(new FileReader(file));
        	while ((tmp = br.readLine()) != null) {
            	str += tmp;
            }
        }
        catch (FileNotFoundException ex){
        	System.out.println(ex);
    	}
   		catch (IOException ex){
        	System.out.println(ex);
   		}

    	try {
    	    Reader reader = new StringReader(str) ;
			SonaMarkosyan parser = new SonaMarkosyan(reader) ;
        	parser.Start();
        }
        catch( TokenMgrError e ) {
        	System.out.println("\nSyntax check failed: " + e.getMessage());
        }
		catch( ParseException e ) {
			System.out.println("\nSyntax check failed: " + e.getMessage());
		}
    }
}

PARSER_END(SonaMarkosyan)

SKIP:  { " " | "\t" | "\n" | "\r"  | "\\"  }
TOKEN: {
  < INC:	"+" > {
		SonaMarkosyan.memory[SonaMarkosyan.ptr]++;
	}

  | < DEC:	"-" > {
		SonaMarkosyan.memory[SonaMarkosyan.ptr]--;
	}
	
  | < OLOOP: "[" > {
		//not to implement
   }

  | < CLOOP: "]" > {
		//not to implement
   }
  | < OUT:  "." > {
	    System.out.print((char)(SonaMarkosyan.memory[SonaMarkosyan.ptr]));
	  }
  | < IN:  "," > {
	    SonaMarkosyan.memory[SonaMarkosyan.ptr] = (char)(SonaMarkosyan.input.next().charAt(0));
	  }
  | < INC_PTR:  ">" > {
		if (SonaMarkosyan.ptr == SonaMarkosyan.LENGTH - 1)
			SonaMarkosyan.ptr = 0;
		else
			SonaMarkosyan.ptr++;
	  }
  | < DEC_PTR:  "<" > {
		if (SonaMarkosyan.ptr == 0)
			SonaMarkosyan.ptr = SonaMarkosyan.LENGTH - 1;
		else
			SonaMarkosyan.ptr--;
	  }
  
}

void Command(): {} {
	( <INC>|
	  <DEC>|
	  <OUT>|
	  <IN>|
	  <INC_PTR>|
	  <DEC_PTR>	  	  
	)*
}

void Brackets() :{} {
  (Command() <OLOOP> Command() [ Brackets() ] Command() <CLOOP> Command())+
}

void Start(): {} {
	Command()(Brackets())* Command()<EOF>
}

